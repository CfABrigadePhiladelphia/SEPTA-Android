def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return '-'+stdout.toString().trim()
}

apply plugin: 'android'

dependencies {
    compile 'com.android.support:gridlayout-v7:19.0.1'
    compile 'com.android.support:support-v4:19.0.1'
    compile 'com.android.support:appcompat-v7:19.0.1'
}

// check that the SEPTA.signing gradle property exists and that its value is the filename to a file
//  that has the extension of gradle
if (project.hasProperty("SEPTA.signing") && file(project.property("SEPTA.signing") + ".gradle").exists()) {
    apply from: project.property("SEPTA.signing") + ".gradle"
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 1
        versionName "0.1.0"
    }

    signingConfigs {
        prerelease {
            storeFile file("${SEPTA_Development_Keystore_File}")
            storePassword KEYSTOREpassword
            keyAlias "prerelease"
            keyPassword PRERELEASE_keyaliaspassword
        }
        alpha {
            storeFile file("${SEPTA_Development_Keystore_File}")
            storePassword KEYSTOREpassword
            keyAlias "alpha"
            keyPassword ALPHA_keyaliaspassword
        }
        beta {
            storeFile file("${SEPTA_Development_Keystore_File}")
            storePassword KEYSTOREpassword
            keyAlias "beta"
            keyPassword BETA_keyaliaspassword
        }
        release {
            storeFile file("${SEPTA_Production_Keystore_File}")
            storePassword KEYSTOREpassword
            keyAlias "release"
            keyPassword RELEASE_keyaliaspassword
        }
    }

    buildTypes {
        debug {
            runProguard false
            debuggable true
            zipAlign false
            signingConfig signingConfigs.prerelease
            versionNameSuffix "d" + "${getGitHash}"
            buildConfigField "String", "VERSIONNAME", "\"${defaultConfig.versionName}" + "${versionNameSuffix}\""
        }
        alpha {
            runProguard false
            debuggable true
            zipAlign true
            signingConfig signingConfigs.prerelease
            versionNameSuffix "a" + "${getGitHash}"
            buildConfigField "String", "VERSIONNAME", "\"${defaultConfig.versionName}" + "${versionNameSuffix}\""
        }
        beta {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            debuggable false
            zipAlign true
            signingConfig signingConfigs.prerelease
            versionNameSuffix "b" + "${getGitHash}"
            buildConfigField "String", "VERSIONNAME", "\"${defaultConfig.versionName}" + "${versionNameSuffix}\""
        }
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            debuggable false
            zipAlign true
            signingConfig signingConfigs.release
            buildConfigField "String", "VERSIONNAME", "\"${defaultConfig.versionName}\""
        }
    }
}
